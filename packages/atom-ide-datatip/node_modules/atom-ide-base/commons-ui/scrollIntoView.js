"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scrollIntoViewIfNeeded = exports.scrollIntoView = void 0;
function scrollIntoView(el, alignToTop) {
    const scrollTops = getScrollTops(el);
    el.scrollIntoView(alignToTop);
    restoreOverflowHiddenScrollTops(scrollTops);
}
exports.scrollIntoView = scrollIntoView;
function scrollIntoViewIfNeeded(el, center) {
    var _a;
    const scrollTops = getScrollTops(el);
    (_a = el === null || el === void 0 ? void 0 : el.scrollIntoViewIfNeeded(center)) !== null && _a !== void 0 ? _a : el.scrollIntoView(center);
    restoreOverflowHiddenScrollTops(scrollTops);
}
exports.scrollIntoViewIfNeeded = scrollIntoViewIfNeeded;
function getScrollTops(el_) {
    let el = el_;
    const scrollTops = new Map();
    while (el != null) {
        scrollTops.set(el, el.scrollTop);
        el = el.parentElement;
    }
    return scrollTops;
}
function restoreOverflowHiddenScrollTops(scrollTops) {
    scrollTops.forEach((scrollTop, el) => {
        if (el.scrollTop !== scrollTop && isOverflowHidden(el)) {
            el.scrollTop = scrollTop;
        }
    });
}
function isOverflowHidden(el) {
    const overflowStyle = el === null || el === void 0 ? void 0 : el.style.overflow;
    const overflow = overflowStyle !== null && overflowStyle !== void 0 ? overflowStyle : getComputedStyle(el).overflow;
    return overflow === "hidden";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsSW50b1ZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMtY29tbW9ucy11aS9zY3JvbGxJbnRvVmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUErQkEsU0FBZ0IsY0FBYyxDQUFDLEVBQVcsRUFBRSxVQUFvQjtJQUM5RCxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDcEMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM3QiwrQkFBK0IsQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUM3QyxDQUFDO0FBSkQsd0NBSUM7QUFFRCxTQUFnQixzQkFBc0IsQ0FBQyxFQUFXLEVBQUUsTUFBZ0I7O0lBQ2xFLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNwQyxNQUFBLEVBQUUsYUFBRixFQUFFLHVCQUFGLEVBQUUsQ0FBRSxzQkFBc0IsQ0FBQyxNQUFNLG9DQUFLLEVBQUUsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDL0QsK0JBQStCLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDN0MsQ0FBQztBQUpELHdEQUlDO0FBRUQsU0FBUyxhQUFhLENBQUMsR0FBWTtJQUNqQyxJQUFJLEVBQUUsR0FBbUIsR0FBRyxDQUFBO0lBQzVCLE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7SUFDNUIsT0FBTyxFQUFFLElBQUksSUFBSSxFQUFFO1FBQ2pCLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNoQyxFQUFFLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQTtLQUN0QjtJQUNELE9BQU8sVUFBVSxDQUFBO0FBQ25CLENBQUM7QUFFRCxTQUFTLCtCQUErQixDQUFDLFVBQWdDO0lBQ3ZFLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUU7UUFDbkMsSUFBSSxFQUFFLENBQUMsU0FBUyxLQUFLLFNBQVMsSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN0RCxFQUFFLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtTQUN6QjtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsRUFBc0M7SUFFOUQsTUFBTSxhQUFhLEdBQUcsRUFBRSxhQUFGLEVBQUUsdUJBQUYsRUFBRSxDQUFFLEtBQUssQ0FBQyxRQUFRLENBQUE7SUFDeEMsTUFBTSxRQUFRLEdBQUcsYUFBYSxhQUFiLGFBQWEsY0FBYixhQUFhLEdBQUksZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFBO0lBQy9ELE9BQU8sUUFBUSxLQUFLLFFBQVEsQ0FBQTtBQUM5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBnZXRDb21wdXRlZFN0eWxlICovXHJcblxyXG4vKipcclxuICogVXNlIHRoZXNlIGZ1bmN0aW9ucyBpbnN0ZWFkIG9mIGBFbGVtZW50OjpzY3JvbGxJbnRvVmlldygpYCBhbmRcclxuICogYEVsZW1lbnQ6OnNjcm9sbEludG9WaWV3SWZOZWVkZWQoKWAhXHJcbiAqXHJcbiAqIFdlJ3ZlIGhhZCBhIHJlY3VycmluZyBpc3N1ZSBpbiBOdWNsaWRlIChlLmcuIFQyMDAyODEzOCkgd2hlcmUgdGhlIFVJIHdvdWxkIHNoaWZ0LCBsZWF2aW5nIHBhcnQgb2ZcclxuICogdGhlIHdvcmtzcGFjZSBlbGVtZW50IG9mZnNjcmVlbiBhbmQgYSBibGFuayBhcmVhIGluIHRoZSB3aW5kb3cuIFRoaXMgd2FzIGNhdXNlZCBieSBjYWxsZWQgdG8gdGhlXHJcbiAqIG5hdGl2ZSBgc2Nyb2xsSW50b1ZpZXcoKWAgYW5kIGBzY3JvbGxJbnRvVmlld0lmTmVlZGVkKClgIHdoaWNoLCBhY2NvcmRpbmcgdG8gdGhlIHNwZWMsIGhhcyB0d29cclxuICogcG90ZW50aWFsbHkgc3VycHJpc2luZyBiZWhhdmlvcnM6XHJcbiAqXHJcbiAqIDEuIFtJdCBzY3JvbGxzIGV2ZXJ5IHNjcm9sbGFibGUgYW5jZXN0b3IgKG5vdCBqdXN0IHRoZSBjbG9zZXN0KV1bMV0sIHdoZXJlXHJcbiAqIDIuIFwic2Nyb2xsYWJsZVwiIGlzIFtleHBsaWNpdGx5IGRlZmluZWRdWzJdIHRvIGluY2x1ZGUgZWxlbWVudHMgd2l0aCBgb3ZlcmZsb3c6IGhpZGRlbmBcclxuICpcclxuICogVGhpcyBpcyBzdXJwcmlzaW5nIGJlY2F1c2UgYG92ZXJmbG93OiBoaWRkZW5gIGlzIHR5cGljYWxseSB1c2VkIHRvIG1ha2UgZWxlbWVudHMgKm5vdFxyXG4gKiBzY3JvbGxhYmxlKi5cclxuICpcclxuICogT25jZSB0aGUgYG92ZXJmbG93OiBoaWRkZW5gIGVsZW1lbnQgaXMgc2Nyb2xsZWQsIHRoZSB1c2VyIGhhcyBubyB3YXkgdG8gcmV0dXJuIGl0IHRvIGl0cyBvcmlnaW5hbFxyXG4gKiBwb3NpdGlvbiAoYXMgaXQgaGFzIG5vIHNjcm9sbGJhcnMpLlxyXG4gKlxyXG4gKiBOb3RlIHRoYXQgdGhpcyBBUEkgZG9lc24ndCBzdXBwb3J0IHNtb290aCBzY3JvbGxpbmcuIElmIHRoYXQgYmVjb21lcyBuZWNlc3NhcnksIHdlJ2xsIG5lZWQgdG9cclxuICogY29tZSB1cCB3aXRoIGEgYmV0dGVyIGZpeC5cclxuICpcclxuICogSXQncyB0ZW1wdGluZyB0byBhc3N1bWUgdGhhdCB1c2luZyBgc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCgpYCB3b3VsZCBmaXggdGhpcyBpc3N1ZSwgaG93ZXZlciwgaWZcclxuICogdGhlIHdpbmRvdyBpcyBzbWFsbCBlbm91Z2ggc28gdGhhdCBubyBhbW91bnQgb2Ygc2Nyb2xsaW5nIHRoZSBkZXNpcmVkIHNjcm9sbGFibGUgZWxlbWVudCB3b3VsZFxyXG4gKiBldmVyIHJldmVhbCB0aGUgZWxlbWVudCB5b3UncmUgdHJ5aW5nIHRvLCB0aGUgYnJvd3NlciB3aWxsIGtlZXAgc2Nyb2xsaW5nIGFuY2VzdG9ycy5cclxuICpcclxuICogWzFdOiBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20tdmlldy8jZWxlbWVudC1zY3JvbGxpbmctbWVtYmVyc1xyXG4gKiBbMl06IGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS12aWV3LyNzY3JvbGxpbmctYm94XHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KGVsOiBFbGVtZW50LCBhbGlnblRvVG9wPzogYm9vbGVhbik6IHZvaWQge1xyXG4gIGNvbnN0IHNjcm9sbFRvcHMgPSBnZXRTY3JvbGxUb3BzKGVsKVxyXG4gIGVsLnNjcm9sbEludG9WaWV3KGFsaWduVG9Ub3ApXHJcbiAgcmVzdG9yZU92ZXJmbG93SGlkZGVuU2Nyb2xsVG9wcyhzY3JvbGxUb3BzKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZChlbDogRWxlbWVudCwgY2VudGVyPzogYm9vbGVhbik6IHZvaWQge1xyXG4gIGNvbnN0IHNjcm9sbFRvcHMgPSBnZXRTY3JvbGxUb3BzKGVsKVxyXG4gIGVsPy5zY3JvbGxJbnRvVmlld0lmTmVlZGVkKGNlbnRlcikgPz8gZWwuc2Nyb2xsSW50b1ZpZXcoY2VudGVyKVxyXG4gIHJlc3RvcmVPdmVyZmxvd0hpZGRlblNjcm9sbFRvcHMoc2Nyb2xsVG9wcylcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U2Nyb2xsVG9wcyhlbF86IEVsZW1lbnQpOiBNYXA8RWxlbWVudCwgbnVtYmVyPiB7XHJcbiAgbGV0IGVsOiBFbGVtZW50IHwgbnVsbCA9IGVsX1xyXG4gIGNvbnN0IHNjcm9sbFRvcHMgPSBuZXcgTWFwKClcclxuICB3aGlsZSAoZWwgIT0gbnVsbCkge1xyXG4gICAgc2Nyb2xsVG9wcy5zZXQoZWwsIGVsLnNjcm9sbFRvcClcclxuICAgIGVsID0gZWwucGFyZW50RWxlbWVudFxyXG4gIH1cclxuICByZXR1cm4gc2Nyb2xsVG9wc1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXN0b3JlT3ZlcmZsb3dIaWRkZW5TY3JvbGxUb3BzKHNjcm9sbFRvcHM6IE1hcDxFbGVtZW50LCBudW1iZXI+KTogdm9pZCB7XHJcbiAgc2Nyb2xsVG9wcy5mb3JFYWNoKChzY3JvbGxUb3AsIGVsKSA9PiB7XHJcbiAgICBpZiAoZWwuc2Nyb2xsVG9wICE9PSBzY3JvbGxUb3AgJiYgaXNPdmVyZmxvd0hpZGRlbihlbCkpIHtcclxuICAgICAgZWwuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wXHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gaXNPdmVyZmxvd0hpZGRlbihlbDogSFRNTEVsZW1lbnQgfCBTVkdFbGVtZW50IHwgRWxlbWVudCk6IGJvb2xlYW4ge1xyXG4gIC8vQHRzLWlnbm9yZVxyXG4gIGNvbnN0IG92ZXJmbG93U3R5bGUgPSBlbD8uc3R5bGUub3ZlcmZsb3dcclxuICBjb25zdCBvdmVyZmxvdyA9IG92ZXJmbG93U3R5bGUgPz8gZ2V0Q29tcHV0ZWRTdHlsZShlbCkub3ZlcmZsb3dcclxuICByZXR1cm4gb3ZlcmZsb3cgPT09IFwiaGlkZGVuXCJcclxufVxyXG4iXX0=