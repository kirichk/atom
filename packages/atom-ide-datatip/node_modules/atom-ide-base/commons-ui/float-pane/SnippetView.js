"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSnippetHtml = exports.SnippetView = void 0;
const React = __importStar(require("react"));
const dompurify_1 = __importDefault(require("dompurify"));
const MarkdownRenderer_1 = require("../MarkdownRenderer");
class SnippetView extends React.Component {
    constructor() {
        super(...arguments);
        this.state = { snippet: "" };
    }
    render() {
        return (React.createElement("div", { className: this.props.containerClassName, onWheel: (e) => this.onMouseWheel(e) },
            React.createElement("div", { className: this.props.contentClassName, dangerouslySetInnerHTML: {
                    __html: this.state.snippet,
                } })));
    }
    onMouseWheel(evt) {
        evt.stopPropagation();
    }
    async componentDidMount() {
        var _a;
        this.setState({
            snippet: (_a = (await getSnippetHtml(this.props.snippet, this.props.grammarName, this.props.renderer))) !== null && _a !== void 0 ? _a : "",
        });
    }
}
exports.SnippetView = SnippetView;
const regexPremeable = /^\s*<(\?|!)([a-zA-Z]+)?\s*/i;
const regexLSPPrefix = /^\((method|property|parameter|alias)\)\W/;
async function getSnippetHtml(snippets, grammarName, renderer) {
    var _a, _b;
    if (grammarName === void 0) { grammarName = ((_b = (_a = atom.workspace.getActiveTextEditor()) === null || _a === void 0 ? void 0 : _a.getGrammar().scopeName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) || ""; }
    if (snippets === undefined) {
        return null;
    }
    if (typeof snippets === "string") {
        snippets = [snippets];
    }
    if (Array.isArray(snippets)) {
        if (snippets.length === 0) {
            return null;
        }
        const markdown = snippets
            .map((snippet) => {
            snippet = snippet
                .replace(regexPremeable, "")
                .replace(regexLSPPrefix, "");
            return `\`\`\`\n${snippet}\n\`\`\``;
        })
            .join("\n");
        if (renderer) {
            return dompurify_1.default.sanitize(await renderer.render(markdown, grammarName));
        }
        else {
            const render = await MarkdownRenderer_1.getMarkdownRenderer();
            return await render(markdown, grammarName);
        }
    }
    else {
        return null;
    }
}
exports.getSnippetHtml = getSnippetHtml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU25pcHBldFZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMtY29tbW9ucy11aS9mbG9hdC1wYW5lL1NuaXBwZXRWaWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkNBQThCO0FBQzlCLDBEQUFpQztBQUVqQywwREFBeUQ7QUFpQnpELE1BQWEsV0FBWSxTQUFRLEtBQUssQ0FBQyxTQUF1QjtJQUE5RDs7UUFDRSxVQUFLLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUE7SUE0QnpCLENBQUM7SUExQkMsTUFBTTtRQUNKLE9BQU8sQ0FDTCw2QkFBSyxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ2pGLDZCQUNFLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUN0Qyx1QkFBdUIsRUFBRTtvQkFDdkIsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTztpQkFDM0IsR0FDRCxDQUNFLENBQ1AsQ0FBQTtJQUNILENBQUM7SUFNRCxZQUFZLENBQUMsR0FBcUI7UUFDaEMsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFBO0lBQ3ZCLENBQUM7SUFFRCxLQUFLLENBQUMsaUJBQWlCOztRQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ1osT0FBTyxRQUFFLENBQUMsTUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxtQ0FBSSxFQUFFO1NBQ3ZHLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRjtBQTdCRCxrQ0E2QkM7QUFFRCxNQUFNLGNBQWMsR0FBRyw2QkFBNkIsQ0FBQTtBQUNwRCxNQUFNLGNBQWMsR0FBRywwQ0FBMEMsQ0FBQTtBQVMxRCxLQUFLLFVBQVUsY0FBYyxDQUNsQyxRQUFnQyxFQUNoQyxXQUF1RyxFQUN2RyxRQUEwQjs7Z0NBRDFCLEVBQUEsMkJBQXNCLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsMENBQUUsVUFBVSxHQUFHLFNBQVMsMENBQUUsV0FBVyxPQUFNLEVBQUU7SUFHdkcsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO1FBQzFCLE9BQU8sSUFBSSxDQUFBO0tBQ1o7SUFHRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtRQUNoQyxRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtLQUN0QjtJQUdELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUMzQixJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFBO1NBQ1o7UUFDRCxNQUFNLFFBQVEsR0FBRyxRQUFRO2FBQ3RCLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2YsT0FBTyxHQUFHLE9BQU87aUJBQ2QsT0FBTyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUM7aUJBQzNCLE9BQU8sQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQUE7WUFDOUIsT0FBTyxXQUFXLE9BQU8sVUFBVSxDQUFBO1FBQ3JDLENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUViLElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxtQkFBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUE7U0FDeEU7YUFBTTtZQUVMLE1BQU0sTUFBTSxHQUFHLE1BQU0sc0NBQW1CLEVBQUUsQ0FBQTtZQUMxQyxPQUFPLE1BQU0sTUFBTSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQTtTQUMzQztLQUNGO1NBQU07UUFDTCxPQUFPLElBQUksQ0FBQTtLQUNaO0FBQ0gsQ0FBQztBQXRDRCx3Q0FzQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxyXG5pbXBvcnQgRE9NUHVyaWZ5IGZyb20gXCJkb21wdXJpZnlcIlxyXG5pbXBvcnQgeyBNYXJrZG93blNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vdHlwZXMtcGFja2FnZXMvbWFpblwiXHJcbmltcG9ydCB7IGdldE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tIFwiLi4vTWFya2Rvd25SZW5kZXJlclwiXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcclxuICBzbmlwcGV0OiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nXHJcbiAgZ3JhbW1hck5hbWU/OiBzdHJpbmdcclxuICByZW5kZXJlcj86IE1hcmtkb3duU2VydmljZVxyXG4gIGNvbnRhaW5lckNsYXNzTmFtZTogc3RyaW5nXHJcbiAgY29udGVudENsYXNzTmFtZTogc3RyaW5nXHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgc25pcHBldDogc3RyaW5nXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIFJlYWN0IGNvbXBvbmVudCB0aGF0IGhvc3RzIGEgY29kZSBzbmlwcGV0IHdpdGggc3ludGF4IGhpZ2hsaWdodGluZ1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNuaXBwZXRWaWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xyXG4gIHN0YXRlID0geyBzbmlwcGV0OiBcIlwiIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9e3RoaXMucHJvcHMuY29udGFpbmVyQ2xhc3NOYW1lfSBvbldoZWVsPXsoZSkgPT4gdGhpcy5vbk1vdXNlV2hlZWwoZSl9PlxyXG4gICAgICAgIDxkaXZcclxuICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jb250ZW50Q2xhc3NOYW1lfVxyXG4gICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcclxuICAgICAgICAgICAgX19odG1sOiB0aGlzLnN0YXRlLnNuaXBwZXQsXHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogaGFuZGxlcyB0aGUgbW91c2Ugd2hlZWwgZXZlbnQgdG8gZW5hYmxlIHNjcm9sbGluZyBvdmVyIGxvbmcgdGV4dFxyXG4gICAqIEBwYXJhbSBldnQgdGhlIG1vdXNlIHdoZWVsIGV2ZW50IGJlaW5nIHRyaWdnZXJlZFxyXG4gICAqL1xyXG4gIG9uTW91c2VXaGVlbChldnQ6IFJlYWN0LldoZWVsRXZlbnQpIHtcclxuICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgc25pcHBldDogKGF3YWl0IGdldFNuaXBwZXRIdG1sKHRoaXMucHJvcHMuc25pcHBldCwgdGhpcy5wcm9wcy5ncmFtbWFyTmFtZSwgdGhpcy5wcm9wcy5yZW5kZXJlcikpID8/IFwiXCIsXHJcbiAgICB9KVxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgcmVnZXhQcmVtZWFibGUgPSAvXlxccyo8KFxcP3whKShbYS16QS1aXSspP1xccyovaVxyXG5jb25zdCByZWdleExTUFByZWZpeCA9IC9eXFwoKG1ldGhvZHxwcm9wZXJ0eXxwYXJhbWV0ZXJ8YWxpYXMpXFwpXFxXL1xyXG5cclxuLyoqXHJcbiAqIGNvbnZlcnRzIGEgZ2l2ZW4gY29kZSBzbmlwcGV0IGludG8gc3ludGF4IGZvcm1hdHRlZCBIVE1MXHJcbiAqIEBwYXJhbSBzbmlwcGV0cyB0aGUgY29kZSBzbmlwcGV0IHRvIGJlIGNvbnZlcnRlZFxyXG4gKiBAcGFyYW0gZ3JhbW1hck5hbWUgdGhlIG5hbWUgb2YgdGhlIGdyYW1tYXIgdG8gYmUgdXNlZCBmb3Igc3ludGF4IGhpZ2hsaWdodGluZ1xyXG4gKiBAcGFyYW0gcmVuZGVyZXIgbWFya2Rvd24gc2VydmljZSB0byBiZSB1c2VkIGZvciByZW5kZXJpbmdcclxuICogQHJldHVybiBhIHByb21pc2Ugb2JqZWN0IHRvIHRyYWNrIHRoZSBhc3luY2hyb25vdXMgb3BlcmF0aW9uXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U25pcHBldEh0bWwoXHJcbiAgc25pcHBldHM6IEFycmF5PHN0cmluZz4gfCBzdHJpbmcsXHJcbiAgZ3JhbW1hck5hbWU6IHN0cmluZyA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKT8uZ2V0R3JhbW1hcigpLnNjb3BlTmFtZT8udG9Mb3dlckNhc2UoKSB8fCBcIlwiLFxyXG4gIHJlbmRlcmVyPzogTWFya2Rvd25TZXJ2aWNlXHJcbik6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xyXG4gIGlmIChzbmlwcGV0cyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxuXHJcbiAgLy8gaWYgc3RyaW5nXHJcbiAgaWYgKHR5cGVvZiBzbmlwcGV0cyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgc25pcHBldHMgPSBbc25pcHBldHNdXHJcbiAgfVxyXG5cclxuICAvLyBpZiBBcnJheVxyXG4gIGlmIChBcnJheS5pc0FycmF5KHNuaXBwZXRzKSkge1xyXG4gICAgaWYgKHNuaXBwZXRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG4gICAgY29uc3QgbWFya2Rvd24gPSBzbmlwcGV0c1xyXG4gICAgICAubWFwKChzbmlwcGV0KSA9PiB7XHJcbiAgICAgICAgc25pcHBldCA9IHNuaXBwZXRcclxuICAgICAgICAgIC5yZXBsYWNlKHJlZ2V4UHJlbWVhYmxlLCBcIlwiKSAvLyByZW1vdmUgYW55IHByZWFtYmxlIGZyb20gdGhlIGxpbmVcclxuICAgICAgICAgIC5yZXBsYWNlKHJlZ2V4TFNQUHJlZml4LCBcIlwiKSAvLyByZW1vdmUgTFNQIHByZWZpeFxyXG4gICAgICAgIHJldHVybiBgXFxgXFxgXFxgXFxuJHtzbmlwcGV0fVxcblxcYFxcYFxcYGBcclxuICAgICAgfSlcclxuICAgICAgLmpvaW4oXCJcXG5cIilcclxuXHJcbiAgICBpZiAocmVuZGVyZXIpIHtcclxuICAgICAgcmV0dXJuIERPTVB1cmlmeS5zYW5pdGl6ZShhd2FpdCByZW5kZXJlci5yZW5kZXIobWFya2Rvd24sIGdyYW1tYXJOYW1lKSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFVzZSBidWlsdC1pbiBtYXJrZG93biByZW5kZXJlciAoaXQgYWxyZWFkeSBkb2VzIHNhbml0aXphdGlvbilcclxuICAgICAgY29uc3QgcmVuZGVyID0gYXdhaXQgZ2V0TWFya2Rvd25SZW5kZXJlcigpXHJcbiAgICAgIHJldHVybiBhd2FpdCByZW5kZXIobWFya2Rvd24sIGdyYW1tYXJOYW1lKVxyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxufVxyXG4iXX0=